{"version":3,"sources":["../src/async.js"],"names":["fs","require","util","co","readFileAsync","path","Promise","resolve","reject","readFile","err","data","JSON","parse","readAsync","promisify","run","console","log","name"],"mappings":";;;;;;;;AAAA,IAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,IAAME,EAAE,GAAGF,OAAO,CAAC,IAAD,CAAlB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,SAASG,aAAT,CAAuBC,IAAvB,EAA6B;AACzB,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCR,IAAAA,EAAE,CAACS,QAAH,CAAYJ,IAAZ,EAAkB,OAAlB,EAA2B,UAACK,GAAD,EAAMC,IAAN,EAAe;AACtC,UAAID,GAAJ,EAAS,OAAOF,MAAM,CAACE,GAAD,CAAb;AACTH,MAAAA,OAAO,CAACK,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAD,CAAP;AACH,KAHD;AAIH,GALM,CAAP;AAMH,C,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMG,SAAS,GAAGZ,IAAI,CAACa,SAAL,CAAef,EAAE,CAACS,QAAlB,CAAlB;;SACeO,G;;;;;;;+BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACqBF,SAAS,CAAC,iBAAD,CAD9B;;AAAA;AACQH,YAAAA,IADR;AAEIA,YAAAA,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAP;AACAM,YAAAA,OAAO,CAACC,GAAR,CAAYP,IAAI,CAACQ,IAAjB;;AAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAKAH,GAAG","sourcesContent":["const fs = require('fs');\nconst util = require('util');\nconst co = require('co');\n// function readFile(cb) {\n//     fs.readFile('../package.json', 'utf-8', (err, data) => {\n//         if (err) return cb(err);\n//         cb(null, data);\n//     });\n// }\n// // 第一阶段 回调函数\n// readFile((err, data) => {\n//     if (!err) {\n//         data = JSON.parse(data);\n//         console.log(data.name);\n//     } else {\n//         console.log(err);\n//     }\n// });\n\n// 第二阶段 Promise\nfunction readFileAsync(path) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(path, 'utf-8', (err, data) => {\n            if (err) return reject(err);\n            resolve(JSON.parse(data));\n        });\n    });\n}\n// // Promise推荐使用catch捕获错误 方式一\n// readFileAsync('../package.json').then(data => {\n//     console.log('---', data.name);\n// }).catch(err => {\n//     console.log(err);\n// });\n// 推荐使用util.promisify 完成从回调向Promise迁移\n// Promise 方式二\n// util.promisify(fs.readFile)('../package.json')\n//     .then(JSON.parse)\n//     .then(data => {\n//         console.log(data.version); // 1.0.0\n//     })\n//     .catch(err => {\n//         console.log(err);\n//     });\n\n// // 第三个阶段 co + Generator Function + Promise\n// co(function *() {\n//     let data = yield util.promisify(fs.readFile)('../package.json');\n//     data = JSON.parse(data);\n//     console.log(data.name);\n// });\n// // 第四个阶段 Async + await\nconst readAsync = util.promisify(fs.readFile);\nasync function run() {\n    let data = await readAsync('../package.json');\n    data = JSON.parse(data);\n    console.log(data.name);\n}\nrun();"],"file":"async.js"}